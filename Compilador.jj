options
{
  	LOOKAHEAD = 6;
  	FORCE_LA_CHECK = true;
}
PARSER_BEGIN(Compilador)
class Compilador
{

	public static void main(String [] Args) throws ParseException
	{


			try
			{
			
				Compilador c = new Compilador(System.in);
				c.Clase();
				System.out.println("Exito.");
			
			}
			catch(ParseException e)
			{
			
				System.out.println(e.getMessage());
				System.out.println("Error.");
	
			}			
	  
	}
  
}
PARSER_END(Compilador)
//Funcionamiento del programa
TOKEN:
{

	<CorcheteIzquierdo: "["> {System.out.println("CorcheteIzquierdo -> "+ image);} //1
| 	<CorcheteDerecho: "]"> {System.out.println("CorcheteDerecho -> "+ image);} //2
| 	<ParentesisIzquierdo: "("> {System.out.println("ParentesisIzquierdo -> "+image);} //3
| 	<ParentesisDerecho: ")"> {System.out.println("ParentesisDerecho -> "+image);} //4
| 	<LlaveIzquierda: "{"> {System.out.println("LlaveIzquierda -> "+ image);} //5
| 	<LlaveDerecha: "}"> {System.out.println("LlaveDerecha -> "+ image);} //6
| 	<PuntoComa: ";"> {System.out.println("Punto y coma -> "+ image);} //7

}
//Declaración de clase
TOKEN:
{

	<Clase: "class"> {System.out.println("\nClase -> " + image);} //8

}
//Declaración del método
TOKEN:
{

	<Publico: "public"> {System.out.println("Publico -> "+ image); } //9
| 	<Regresar: "return"> {System.out.println("Regresar -> "+ image);} //10

}
//Tipo de dato
TOKEN:
{

 	<Entero: "int"> {System.out.println("Entero -> "+ image);} //11
| 	<Booleano: "boolean"> {System.out.println("Booleano -> "+ image);} //12
|	<Void: "void"> {System.out.println("Booleano -> "+ image);} //13

}
//Sentencia
TOKEN:
{

	<Si: "if"> {System.out.println("Si -> "+ image);} //14
| 	<Entonces: "else"> {System.out.println("Entonces -> "+ image);} //15
| 	<Mientras: "while"> {System.out.println("Mientras -> "+ image);} //16
| 	<Imprimir: "System.out.println"> {System.out.println("Imprimir -> "+ image);} //17
| 	<Asignacion: "="> {System.out.println("Asignacion -> "+ image);} //18

}
//Expresión
TOKEN:
{

	<Y: "&&"> {System.out.println("Y -> "+ image);} //19
| 	<MenorQue: "<"> {System.out.println("Menor que -> "+ image);} //20
|	<MenorIgualQue: "<="> {System.out.println("Menor igual que -> "+ image);} //21
|	<MayorIgualQue: " >="> {System.out.println("Mayor igual que -> "+ image);} //22
|	<Diferente: "!="> {System.out.println("Diferente -> "+ image);} //23
|	<Igual: "=="> {System.out.println("igual -> "+ image);} //24
| 	<Suma: "+"> {System.out.println("Suma -> "+ image);} //25
| 	<Resta: "-"> {System.out.println("Resta -> "+ image);} //26
| 	<Multiplicacion: "*"> {System.out.println("Multiplicacion -> "+ image);} //27
| 	<Coma : ","> {System.out.println("Coma -> "+ image);} //28
| 	<Punto: "."> {System.out.println("Punto -> "+ image);} //29
| 	<Longitud: "length"> {System.out.println("Longitud -> "+ image);} //30
| 	<Numero: (["0"-"9"])+> {System.out.println("Numero -> "+ image);} //31
| 	<Verdadero: "true"> {System.out.println("Verdadero -> "+ image);} //32
| 	<Falso: "false"> {System.out.println("Falso ->"+ image);} //33
| 	<Este: "this"> {System.out.println("Este ->"+ image);} //34
| 	<Nuevo: "new"> {System.out.println("Nuevo -> "+ image);} //35
| 	<Negacion: "!"> {System.out.println("Negacion ->"+ image);} //36

}
//Identificador
TOKEN:
{

	<Identificador: ["a"-"z", "A"-"Z"] (["a"-"z", "A"-"Z", "0"-"9", "_"])*> {System.out.println("Identificador -> "+ image);} //37

}
//Omitir
SKIP:
{

	" " | "\r" | "\n" | "\t" | "//" | "/*" | "*/"

}

void Clase():
{ }
{

	<Clase>Identificador()<LlaveIzquierda>(Declaracion())* (Metodo())* <LlaveDerecha><EOF>

}

void Declaracion():
{ }
{

	(Tipo())?Identificador()<Asignacion>Expresion()<PuntoComa> | Tipo()Identificador()(<Asignacion>Expresion())?<PuntoComa> | Identificador()<Asignacion>Expresion()<PuntoComa>

}

void Tipo():
{ }
{

    <Booleano> | <Entero> | Identificador() | <Void>

}

void Metodo():
{ }
{

	<Publico>Tipo()Identificador()<ParentesisIzquierdo>(Tipo()Identificador() (<Coma>Tipo()Identificador())*)?<ParentesisDerecho><LlaveIzquierda> (Declaracion())* (Sentencia())*(<Regresar>Expresion()<PuntoComa>)?<LlaveDerecha>

}

void Sentencia():
{ }
{

  <LlaveIzquierda>(Sentencia())*<LlaveDerecha>
| <Si><ParentesisIzquierdo>(Expresion())*<ParentesisDerecho>(Sentencia())*(<Entonces>Sentencia())?
| <Mientras><ParentesisIzquierdo>Expresion()<ParentesisDerecho>(Sentencia())*
| <Imprimir><ParentesisIzquierdo>Expresion()<ParentesisDerecho><PuntoComa>
| (Tipo())?Identificador()<Asignacion>Expresion()<PuntoComa>
| Tipo()Identificador()(<Asignacion>Expresion())?<PuntoComa>
| Identificador()<Asignacion>Expresion()<PuntoComa>

}

void Expresion():
{ }
{


	(<Numero>|Identificador())(<Y> | <MenorQue> | <MenorIgualQue> | <MayorIgualQue> | <Diferente> | <Igual> | <Suma> | <Resta> | <Multiplicacion>)Expresion()
|   Declaracion()
|   Identificador()<Punto><Longitud>
|   <Este><Punto>Identificador()<ParentesisIzquierdo>(Expresion()(<Coma>Expresion())*)?<ParentesisDerecho>
|   <Numero>
|   <Verdadero>
|   <Falso>
|   Identificador()
|   <Este>
|   <Nuevo><Entero><CorcheteIzquierdo>Expresion()<CorcheteDerecho>
|   <Nuevo>Identificador()<ParentesisIzquierdo><ParentesisDerecho>
|   <Negacion>(<Verdadero>|<Falso>)
|   <ParentesisIzquierdo>Expresion()<ParentesisDerecho>


}

void Identificador():
{ }
{

	<Identificador>

}